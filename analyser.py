import argparse, os
import shutil, magic
import colors
from mainchecks import malware_check, file_pack_check, crypto_check, antidbvm_check
from check_allfiles import scannerfunc
from listupdates import internet_check, yara_update
from virustotalrun import virustotal
from all_analysis import mainscan

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Malware Analysis Tool")
    parser.add_argument("filename", help="/path/to/file")
    parser.add_argument("-k", "--api-key", help="Virustotal API key")
    parser.add_argument("-u", "--update", help="Update Yara-Rules (yes/no) usage ./ssma.py sample.exe -u yes")

    args = parser.parse_args()
    print("----------------------------------------------------------------------------------")
    print()
    print(colors.CYAN + "Malware Analysis Tool for ISAA Project" + colors.RESET)
    print(colors.RED + "By Deraj.R.M, Rakesh.M,John Jacob" + colors.RESET)
    print()
    print("----------------------------------------------------------------------------------")
    if args.update == "yes":
        if os.path.exists("rules"):
            shutil.rmtree("rules")
        if os.path.exists("rules_compiled"):
            shutil.rmtree("rules_compiled")
            os.mkdir("rules_compiled")
        print(colors.BOLD + colors.CYAN + "[-] Updating Yara-Rules..." + colors.RESET)
        yara_update()
        print(colors.BOLD + colors.GREEN + "[+] Updated for Yara-Rules!" + colors.RESET)
        print()
        if not args.filename:
            exit()
        else:
            pass
    else:
        pass
    try:
        os.path.realpath(args.filename)
    except:
        try:
            os.path.realpath(args.directory)
        except:
            print(colors.BOLD + colors.RED + "No option selected, run ssma.py -h" + colors.RESET)
            exit()

    internet_connection = internet_check()

    py_file_location = os.path.dirname(__file__)
    args.filename = os.path.realpath(args.filename)
    if py_file_location:
        os.chdir(py_file_location)
    filetype = magic.from_file(args.filename, mime=True)
    if filetype == 'application/x-dosexec':
        pe = scannerfunc(filename=args.filename)
        print(colors.BOLD + colors.BLUE + "File Details: " + colors.RESET)
        for n in pe.info_file(args.filename):
                print()
                print('\t', n)
        print()
        print("----------------------------------------------------------------------------------")
        fileheader_check = pe.fileheader_check(args.filename)
        continue_message = False
        if fileheader_check["debug"]:
            continue_message = True
        if any(tr[1] for tr in fileheader_check["flags"]):
            continue_message = True
            print(colors.LIGHT_RED + "Suspicious flags in the characteristics of the PE file: " + colors.RESET)
            print()
            for n in fileheader_check["flags"]:
                if n[1]:
                    print(colors.RED + n[0] + colors.RESET + " flag is set - {}".format(n[2]))
            print()
            print("----------------------------------------------------------------------------------")
        importcheck_result = pe.importcheck()
        if importcheck_result:
            print(
                colors.BOLD + colors.BLUE + "This file contains a list of Windows functions commonly used by malware.\n" + colors.RESET)
            for n in importcheck_result:
                n = n.split("^")
                print('\t' + colors.LIGHT_RED + n[0] + colors.RESET + " - " + n[1])
            print()
            print("----------------------------------------------------------------------------------")
    else:
        print()
        print("----------------------------------------------------------------------------------")

    if args.api_key and internet_connection:
        virus_check = virustotal(args.filename, args.api_key)
        if virus_check[0] == "scan_result":
            print(colors.BOLD + colors.BLUE + "Virustotal:" + colors.RESET)
            for n in virus_check[1]:
                n = n.split("^")
                print('\t' + colors.CYAN + n[0] + colors.RESET + "-" + colors.LIGHT_RED + n[1] + colors.RESET)
            print()
            print("----------------------------------------------------------------------------------")
        elif virus_check[0] == "permalink":
            if virus_check[1]:
                print(colors.LIGHT_BLUE + "Your file is being analysed." + colors.RESET)
                print(colors.BOLD + "VirusTotal link: " + colors.RESET, virus_check[1][0])
                print()
                print("----------------------------------------------------------------------------------")
                if input("Continue? [Y/n] ") == 'n':
                    exit()
                print()
    elif args.api_key and not internet_connection:
        print(colors.RED + "No internet connection" + colors.RESET)
        print("----------------------------------------------------------------------------------")
    if filetype == 'application/x-dosexec' or filetype == 'application/x-executable' or args.document:
        print(
            colors.BOLD + colors.BLUE + "Scan file using Yara-rules." + colors.RESET)
    if not os.path.exists("rules"):
        os.mkdir("rules")
    if not os.path.exists("rules_compiled"):
        os.mkdir("rules_compiled")
    if not os.listdir("rules"):
        print(colors.BOLD + colors.CYAN + "Downloading Yara-rules... \n" + colors.RESET)
        print()
        yara_update()
    if filetype == 'application/x-dosexec':
        malicious_software = malware_check(filename=args.filename)
        if malicious_software:
            print(
                colors.BOLD + colors.BLUE + "These Yara rules specialised on the identification of well-known malware.\nResult: " + colors.RESET)
            for n in malicious_software:
                try:
                    print("\t {} - {}".format(n, n.meta['description']))
                except:
                    print('\t', n)
            print()
            print("----------------------------------------------------------------------------------")
        packed = file_pack_check(filename=args.filename)
        if packed:
            print(
                colors.BOLD + colors.BLUE + "These Yara Rules aimed to detect well-known software packers, that can be used by malware to hide itself.\nResult: " + colors.RESET)
            for n in packed:
                try:
                    print("\t {} - {}".format(n, n.meta['description']))
                except:
                    print('\t', n)
            print()
            print("----------------------------------------------------------------------------------")
        crypto = crypto_check(filename=args.filename)
        if crypto:
            print(
                colors.BOLD + colors.BLUE + "These Yara rules aimed to detect the existence of cryptographic algorithms." + colors.RESET)
            print(colors.BLUE + "Detected cryptographic algorithms: " + colors.RESET)
            for n in crypto:
                try:
                    print("\t {} - {}".format(n, n.meta['description']))
                except:
                    print('\t', n)
            print()
            print("----------------------------------------------------------------------------------")
        anti_vm = antidbvm_check(filename=args.filename)
        if anti_vm:
            print(
                colors.BOLD + colors.BLUE + "These Yara Rules aimed to detect anti-debug and anti-virtualization techniques used by malware to evade automated analysis.\nResult: " + colors.RESET)
            for n in anti_vm:
                try:
                    print("\t {} - {}".format(n, n.meta['description']))
                except:
                    print('\t', n)
            print()
            print("----------------------------------------------------------------------------------")
        print(colors.BOLD + "\tAnalysis Complete" + colors.RESET)
        print("----------------------------------------------------------------------------------")
        print(colors.BLUE + "Scan Totally Done" + colors.CYAN + colors.RESET + "\n")